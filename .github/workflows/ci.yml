---
name: CI/CD
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  deploy:
    name: Build and push to ghcr.io
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@main

      - name: Set IMAGE_NAME env as github_repository lower-case
        run: |
          echo IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Set image tags based on environment
        run: |
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            echo IMAGE_TAGS=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.version }}-staging >> $GITHUB_ENV
          else
            echo IMAGE_TAGS=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.version }} >> $GITHUB_ENV
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@master
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_TAGS }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true